import express from "express";
import http from "http";
import { WebSocketServer } from "ws";

// --- Initialization ---
const app = express();
const server = http.createServer(app);
const wss = new WebSocketServer({ server });
const PORT = 3000;

console.log("Starting MOCK server for testing...");

app.get("/", (req, res) => {
  res.send("Mock subtitle backend is running!");
});

// This is a pre-recorded, base64-encoded MP3 audio file that says "Test".
// We will use this as our "dubbed" audio.
const MOCK_AUDIO_BASE64 = "SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjQ1LjEwMAAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxJoZ+wAAR5YjQUQDAAAA03/jAAGbGF2YzU4Ljc2AAAAAAAAAAAAAAAAAAAAAAD/9sQAAAAABAAAM/8AAAABAAAAAAAAAAAAAAAAAAAAAP/9sQAAAAABAAAM/8AAAABAAAAAAAAAAAAAAAAAAAAAP/9sQAAAAABAAAM/8AAAABAAAAAAAAAAAAAAAAAAAAA//tAwAAGa5tJ6/1qxgAAAAAngg1gABOAABASwAAAABj//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9sQAAADAEAAAAM/wAAAAQAAAAAAAAAAAAAAAAAAAAA//9-";

// --- WebSocket Logic ---
wss.on("connection", (ws) => {
  console.log("Client connected to MOCK server");

  let accumulationTimer = null;

  ws.on("message", async (message) => {
    // We receive the audio message, but we won't do anything with it.
    // Instead, we'll just wait a bit to simulate API latency.
    console.log("Mock server received an audio chunk from the client.");

    // We only send one response every 5 seconds, just like the real server.
    if (!accumulationTimer) {
      accumulationTimer = setTimeout(() => {
        
        // This is the fake data we will send back.
        // It has the EXACT same structure as the real Google API response.
        const mockResponse = {
          translatedText: "This is a test subtitle from the mock server.",
          audioData: MOCK_AUDIO_BASE64,
        };
        
        if (ws.readyState === WebSocket.OPEN) {
          console.log("Sending mock response to client...");
          ws.send(JSON.stringify(mockResponse));
        }

        // Reset the timer
        accumulationTimer = null;
      }, 5000); // Simulate the 5-second accumulation delay
    }
  });

  ws.on("close", () => {
    console.log("Client disconnected from MOCK server");
    if (accumulationTimer) {
      clearTimeout(accumulationTimer);
    }
  });

  ws.onerror = (err) => {
    console.error("WebSocket MOCK server error:", err.message);
  };
});

// --- Start Server ---
server.listen(PORT, () => {
  console.log(`ðŸš€ Mock server is running and listening on http://localhost:${PORT}`);
});
